// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_RAILWAY")
}

model User {
  id       Int      @id @default(autoincrement())
  username String   @unique
  password String
  isActive IsActive @default(INACTIVE)
  role     Role     @default(USER)
}

enum IsActive {
  ACTIVE
  INACTIVE
}

enum Role {
  USER
  ADMIN
}

model Project {
  id             Int                  @id @default(autoincrement())
  name           String
  service        String?
  ref            String?
  short          String?
  year           Int?
  contents       ContentsOnProjects[]
  client         Client               @relation(fields: [clientId], references: [id])
  clientId       Int
  TagsOnProjects TagsOnProjects[]

}

model Client {
  id       Int       @id @default(autoincrement())
  name     String
  imgUrl   String
  projects Project[]
}

model Tag {
  id             Int              @id @default(autoincrement())
  name           String
  TagsOnProjects TagsOnProjects[]
  colorSchema    ColorSchema
}

model Content {
  id          Int                      @id @default(autoincrement())
  text        String
  textShort   String
  textMatrix  String
  section     Section                  @relation(fields: [sectionId], references: [id])
  sectionId   Int
  type        Type
  projects    ContentsOnProjects[]
  projectType ProjectTypesOnContents[]
  var         String?
  vartype     Vartype?
}

enum Vartype {
  integer
  float
  currency
  file
}

model ProjectType {
  id       Int                      @id @default(autoincrement())
  name     String
  contents ProjectTypesOnContents[]
}

model ProjectTypesOnContents {
  id            Int         @id @default(autoincrement())
  content       Content     @relation(fields: [contentId], references: [id])
  contentId     Int
  projectType   ProjectType @relation(fields: [projectTypeId], references: [id])
  projectTypeId Int
}

model TagsOnProjects {
  id        Int     @id @default(autoincrement())
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     Int
}

model ContentsOnProjects {
  id        Int     @id @default(autoincrement())
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
  content   Content @relation(fields: [contentId], references: [id])
  contentId Int
}

enum ColorSchema {
  whiteAlpha
  blackAlpha
  gray
  red
  orange
  yellow
  green
  teal
  blue
  cyan
  purple
  pink
}

enum Type {
  muss
  bewertung
  optional
  info
}

model Section {
  id              Int      @id @default(autoincrement())
  name            String
  rang            Int
  parentSectionId Int?     @unique
  parentSection   Section? @relation("parentChild", fields: [parentSectionId], references: [id])
  childSection    Section? @relation("parentChild")

  contents Content[]
}
